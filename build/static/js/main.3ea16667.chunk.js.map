{"version":3,"sources":["ui/assets/images/logo.svg","ui/components/App/App.js","ui/reducers/common.reducer.js","ui/actions/common.actions.js","ui/services/socket.js","ui/config.js","ui/services/index.js","ui/store.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","player","CommonTypes","SHOW_PRELOADER","concat","HIDE_PRELOADER","initialState","isShowPreloader","CommonActions","showPreloader","type","hidePreloader","callApi","Object","defineProperty","RSAA","endpoint","method","types","socket","io","services_socket","emit","Promise","res","rej","on","timestamp","movement","up","down","left","right","movementTmp","getSocket","App","this","props","setState","interval","undefined","game","ctx","width","height","playerTmp","_this","document","addEventListener","event","code","objectSpread","id","window","innerWidth","innerHeight","getElementById","getContext","player_","console","log","gameState","draw","players","field","clearRect","strokeStyle","strokeRect","x","y","i","length","fillStyle","color","beginPath","arc","r","Math","PI","fill","react_default","a","createElement","className","src","logo","alt","state","Component","connect","common","dispatch","bindActionCreators","rootReducer","combineReducers","arguments","createStore","composeWithDevTools","applyMiddleware","thunk","apiMiddleware","Boolean","location","hostname","match","ReactDOM","render","es","store","BrowserRouter","Route","path","component","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ea16667.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport logo from '../../assets/images/logo.svg';\nimport './App.scss';\nimport { CommonActions } from '../../actions';\nimport services from '../../services';\n\nlet movement = {\n  up: false,\n  down: false,\n  left: false,\n  right: false\n};\nconst movementTmp = {\n  up: false,\n  down: false,\n  left: false,\n  right: false\n};\nconst socket = services.socket.getSocket();\nlet player;\n\nclass App extends Component {\n  componentWillMount() {\n    this.props.showPreloader();\n\n    this.setState({\n      timestamp: 0\n    });\n\n    this.interval = undefined;\n    this.game = undefined;\n    this.ctx = undefined;\n    this.width = 0;\n    this.height = 0;\n    this.player = undefined;\n    this.playerTmp = undefined;\n\n    // services.socket\n    //   .start()\n    //   .then(timestamp => this.setState({timestamp}))\n    //   .catch(err => console.error(err));\n  }\n\n  componentDidMount() {\n    this.props.hidePreloader();\n\n    document.addEventListener('keydown', (event) => {\n      switch (event.code) {\n        case 'KeyA': // A\n          movementTmp.left = true;\n          break;\n        case 'KeyW': // W\n          movementTmp.up = true;\n          break;\n        case 'KeyD': // D\n          movementTmp.right = true;\n          break;\n        case 'KeyS': // S\n          movementTmp.down = true;\n          break;\n      }\n\n      if (\n        movement.left === movementTmp.left &&\n        movement.up === movementTmp.up &&\n        movement.right === movementTmp.right &&\n        movement.down === movementTmp.down\n      ) {\n        return;\n      }\n\n      movement = {...movementTmp};\n\n      // this.interval = setInterval(() => socket.emit('movement', {...movement, id: this.player.id}), 1000 / 60);\n      socket.emit('movement', {...movement, id: player.id});\n    });\n\n    document.addEventListener('keyup', (event) => {\n      switch (event.code) {\n        case 'KeyA': // A\n          movementTmp.left = false;\n          break;\n        case 'KeyW': // W\n          movementTmp.up = false;\n          break;\n        case 'KeyD': // D\n          movementTmp.right = false;\n          break;\n        case 'KeyS': // S\n          movementTmp.down = false;\n          break;\n      }\n\n      if (\n        movement.left === movementTmp.left &&\n        movement.up === movementTmp.up &&\n        movement.right === movementTmp.right &&\n        movement.down === movementTmp.down\n      ) {\n        return;\n      }\n\n      movement = {...movementTmp};\n\n      socket.emit('movement', {...movement, id: player.id});\n\n      // if (!movement.left && !movement.up && !movement.right && !movement.down) {\n      //   clearInterval(this.interval);\n      //   socket.emit('movement', {...movement, id: this.player.id});\n      // }\n    });\n\n    socket.emit('new player');\n\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n\n    this.game = document.getElementById('game');\n    this.game.width = this.width;\n    this.game.height = this.height;\n\n    this.ctx = this.game.getContext('2d');\n\n    socket.on('new player confirm', player_ => {\n      console.log('player', player_);\n      if (player) {\n        return;\n      }\n      player = player_;\n    });\n\n    socket.on('state', gameState => {\n      // console.log('state', gameState);\n      // this.setState({field: gameState.field});\n      this.draw(gameState.players, gameState.field);\n    });\n  }\n\n  draw(players, field) {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n\n    this.ctx.strokeStyle = '#FF0000';\n    this.ctx.strokeRect(field.x, field.y, field.width, field.height);\n\n    for (let i = 0; i < players.length; i++) {\n      this.playerTmp = players[i];\n      this.ctx.fillStyle = this.playerTmp.color;\n      this.ctx.beginPath();\n      this.ctx.arc(this.playerTmp.x, this.playerTmp.y, this.playerTmp.r, 0, 2 * Math.PI);\n      this.ctx.fill();\n    }\n  }\n\n  render() {\n    const { isShowPreloader } = this.props;\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            Header\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-3\">\n            Sidebar\n\n            <div>Timestamp: {this.state.timestamp}</div>\n          </div>\n          <div className=\"col-md-9\">\n            {isShowPreloader ? <div>Loading...</div> : <div>Content</div>}\n\n            <canvas id=\"game\" />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            Footer 1\n          </div>\n          <div className=\"col-md-4\">\n            Footer 2\n          </div>\n          <div className=\"col-md-4\">\n            Footer 3\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  isShowPreloader: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  isShowPreloader: state.common.isShowPreloader\n});\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  ...CommonActions\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const name = 'COMMON';\nexport const CommonTypes = {\n  SHOW_PRELOADER: `${name}:SHOW_PRELOADER`,\n  HIDE_PRELOADER: `${name}:HIDE_PRELOADER`\n};\n\nconst initialState = {\n  isShowPreloader: false\n};\n\nexport const CommonReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CommonTypes.SHOW_PRELOADER: {\n      return {\n        ...state,\n        isShowPreloader: true\n      };\n    }\n\n    case CommonTypes.HIDE_PRELOADER: {\n      return {\n        ...state,\n        isShowPreloader: false\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { RSAA } from 'redux-api-middleware';\nimport { CommonTypes } from '../reducers';\n\nexport const CommonActions = {\n  showPreloader: () => ({type: CommonTypes.SHOW_PRELOADER}),\n  hidePreloader: () => ({type: CommonTypes.HIDE_PRELOADER}),\n  callApi: () => ({\n    [RSAA]: {\n      endpoint: '',\n      method: 'GET',\n      types: ['REQUEST', 'SUCCESS', 'FAILURE']\n    }\n  })\n};\n","import io from 'socket.io-client';\nimport config from '../config';\n\nconst socket = io(config.server);\n\nclass Socket {\n  start() {\n    socket.emit('subscribeToTimer', 1000);\n    return new Promise((res, rej) => {\n      socket.on('timer', timestamp => res(timestamp));\n    });\n  }\n\n  getSocket() {\n    return socket;\n  }\n}\n\nexport default new Socket();\n","export default {\n  server: 'http://local.online:3000'\n};\n","import socket from './socket';\n\nexport default {\n  socket\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { apiMiddleware } from 'redux-api-middleware';\nimport { CommonReducer } from './reducers';\n\nconst rootReducer = combineReducers({\n  common: CommonReducer\n});\n\nexport default createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk, apiMiddleware)));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { App } from './ui/components';\nimport store from './ui/store';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/scss/bootstrap.scss';\nimport './ui/assets/styles/style.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Route path=\"/\" component={App} />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}