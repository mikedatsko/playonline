{"version":3,"sources":["ui/assets/images/logo.svg","ui/reducers/common.reducer.js","ui/actions/common.actions.js","ui/services/socket.js","ui/config.js","ui/services/index.js","ui/components/App/App.js","ui/store.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CommonTypes","SHOW_PRELOADER","concat","HIDE_PRELOADER","initialState","isShowPreloader","CommonActions","showPreloader","type","hidePreloader","callApi","Object","defineProperty","RSAA","endpoint","method","types","socket","io","services","emit","Promise","res","rej","on","timestamp","App","_this","this","console","log","props","setState","start","then","catch","err","error","_this2","setTimeout","react_default","a","createElement","className","src","logo","alt","href","target","rel","state","Component","connect","common","dispatch","bindActionCreators","objectSpread","rootReducer","combineReducers","arguments","length","undefined","createStore","composeWithDevTools","applyMiddleware","thunk","apiMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","es","store","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sTCC3BC,EAAc,CACzBC,eAAc,GAAAC,OAFH,SAEG,mBACdC,eAAc,GAAAD,OAHH,SAGG,oBAGVE,EAAe,CACnBC,iBAAiB,GCJNC,EAAgB,CAC3BC,cAAe,iBAAO,CAACC,KAAMR,EAAYC,iBACzCQ,cAAe,iBAAO,CAACD,KAAMR,EAAYG,iBACzCO,QAAS,kBAAAC,OAAAC,EAAA,EAAAD,CAAA,GACNE,OAAO,CACNC,SAAU,GACVC,OAAQ,MACRC,MAAO,CAAC,UAAW,UAAW,uBCP9BC,QAASC,GCFL,yBCCKC,EAAA,CACbF,OFWa,oGANX,OADAA,EAAOG,KAAK,mBAAoB,KACzB,IAAIC,QAAQ,SAACC,EAAKC,GACvBN,EAAOO,GAAG,QAAS,SAAAC,GAAS,OAAIH,EAAIG,kBGApCC,+LACiB,IAAAC,EAAAC,KACnBC,QAAQC,IAAI,WACZF,KAAKG,MAAMxB,gBAEXqB,KAAKI,SAAS,CACZP,UAAW,IAGbN,EAASF,OACNgB,QACAC,KAAK,SAAAT,GAAS,OAAIE,EAAKK,SAAS,CAACP,gBACjCU,MAAM,SAAAC,GAAG,OAAIP,QAAQQ,MAAMD,iDAGZ,IAAAE,EAAAV,KAClBW,WAAW,kBAAMD,EAAKP,MAAMtB,iBAAiB,sCAIjBmB,KAAKG,MAAzB1B,gBAER,OACEmC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBAUFT,EAAAC,EAAAC,cAAA,yBAAiBd,KAAKsB,MAAMzB,mBAvClB0B,aA0DHC,cAPS,SAAAF,GAAK,MAAK,CAChC7C,gBAAiB6C,EAAMG,OAAOhD,kBAEL,SAAAiD,GAAQ,OAAIC,6BAAmB5C,OAAA6C,EAAA,EAAA7C,CAAA,GACrDL,GACFgD,IAEYF,CAA6C1B,mBC7DtD+B,EAAcC,0BAAgB,CAClCL,ONG2B,WAAkC,IAAjCH,EAAiCS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBvD,EACpC,QAD6DuD,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC9CrD,MACb,KAAKR,EAAYC,eACf,OAAOU,OAAA6C,EAAA,EAAA7C,CAAA,GACFuC,EADL,CAEE7C,iBAAiB,IAIrB,KAAKL,EAAYG,eACf,OAAOQ,OAAA6C,EAAA,EAAA7C,CAAA,GACFuC,EADL,CAEE7C,iBAAiB,IAIrB,QACE,OAAO6C,MMjBEY,wBAAYL,EAAaM,8BAAoBC,0BAAgBC,IAAOC,mBCE/DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OACPjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAUC,MAAOA,GACfnC,EAAAC,EAAAC,cAACkC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.b0341ae3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const name = 'COMMON';\nexport const CommonTypes = {\n  SHOW_PRELOADER: `${name}:SHOW_PRELOADER`,\n  HIDE_PRELOADER: `${name}:HIDE_PRELOADER`\n};\n\nconst initialState = {\n  isShowPreloader: false\n};\n\nexport const CommonReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CommonTypes.SHOW_PRELOADER: {\n      return {\n        ...state,\n        isShowPreloader: true\n      };\n    }\n\n    case CommonTypes.HIDE_PRELOADER: {\n      return {\n        ...state,\n        isShowPreloader: false\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { RSAA } from 'redux-api-middleware';\nimport { CommonTypes } from '../reducers';\n\nexport const CommonActions = {\n  showPreloader: () => ({type: CommonTypes.SHOW_PRELOADER}),\n  hidePreloader: () => ({type: CommonTypes.HIDE_PRELOADER}),\n  callApi: () => ({\n    [RSAA]: {\n      endpoint: '',\n      method: 'GET',\n      types: ['REQUEST', 'SUCCESS', 'FAILURE']\n    }\n  })\n};\n","import io from 'socket.io-client';\nimport config from '../config';\n\nconst socket = io(config.server);\n\nclass Socket {\n  start() {\n    socket.emit('subscribeToTimer', 1000);\n    return new Promise((res, rej) => {\n      socket.on('timer', timestamp => res(timestamp));\n    });\n  }\n}\n\nexport default new Socket();\n","export default {\n  server: 'http://localhost:3000'\n};\n","import socket from './socket';\n\nexport default {\n  socket\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport logo from '../../assets/images/logo.svg';\nimport './App.css';\nimport { CommonActions } from '../../actions';\nimport services from '../../services';\n\nclass App extends Component {\n  componentWillMount() {\n    console.log('started')\n    this.props.showPreloader();\n\n    this.setState({\n      timestamp: 0\n    });\n\n    services.socket\n      .start()\n      .then(timestamp => this.setState({timestamp}))\n      .catch(err => console.error(err));\n  }\n\n  componentDidMount() {\n    setTimeout(() => this.props.hidePreloader(), 5000);\n  }\n\n  render() {\n    const { isShowPreloader } = this.props;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n\n        <div>Timestamp: {this.state.timestamp}</div>\n\n        {/*{isShowPreloader ? <div>Loading...</div> : null}*/}\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  isShowPreloader: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  isShowPreloader: state.common.isShowPreloader\n});\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  ...CommonActions\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { apiMiddleware } from 'redux-api-middleware';\nimport { CommonReducer } from './reducers';\n\nconst rootReducer = combineReducers({\n  common: CommonReducer\n});\n\nexport default createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk, apiMiddleware)));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './ui/components';\nimport store from './ui/store';\nimport * as serviceWorker from './serviceWorker';\nimport './ui/assets/styles/style.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}